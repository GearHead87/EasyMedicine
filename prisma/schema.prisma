// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  image         String?
  emailVerified DateTime?
  role          Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders            Order[]
  cartItems         CartItem[]
  shippingAddresses ShippingAddress[]
}

model Category {
  id            String     @id @default(cuid())
  name          String
  parentId      String?
  parent        Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToCategory")
  products      Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  stock       Int
  variants    Variant[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Variant {
  id        String  @id @default(cuid())
  mg        Int
  price     Float
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  totalAmount Float
  status      OrderStatus
  // shippingAddressId String
  // shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  ShippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingAddress {
  id         String @id @default(cuid())
  userId     String
  user       User   @relation(fields: [userId], references: [id])
  address    String
  city       String
  state      String
  postalCode String
  country    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model CartItem {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity   Int
  selectedMg Int?
  price      Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}
